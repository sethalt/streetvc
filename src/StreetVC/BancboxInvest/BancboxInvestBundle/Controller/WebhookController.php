<?php

namespace StreetVC\BancboxInvest\BancboxInvestBundle\Controller;

use FOS\RestBundle\Request\ParamFetcher;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use FOS\RestBundle\Controller\Annotations as FOS;
use Symfony\Component\Debug\Exception\UndefinedMethodException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class WebhookController extends Controller
{

    /**
     * @FOS\RequestParam(name="action", nullable=false)
     * @FOS\RequestParam(name="cfp_apiKey", nullable=false)
     * @FOS\Post("/api/bancbox/webhooks")
     * @param Request $request
     * @param ParamFetcher $paramFetcher
     * @return array
     */
    public function postHookAction(Request $request, ParamFetcher $paramFetcher)
    {
        $action = $paramFetcher->get('action');
        $apiKey = $paramFetcher->get('cfp_apiKey');

        $service = $this->get('bancbox_invest.webhook_service');
        $service->validateAction($action); // log unknown action requests
        $service->verifyKey($apiKey);

        $params = $request->request->all();

        $service->notify($action, $params);

        return new Response(null, Response::HTTP_NO_CONTENT);
    }

    private function getLogger()
    {
        $logger = $this->container->get('monolog.logger.bancbox');
        return $logger;
    }

    private function camelize($id)
    {
        return lcfirst(strtr(ucwords(strtr(strtolower($id), array('_' => ' ', '.' => '_ ', '\\' => '_ '))), array(' ' => '')));
    }

    private function call($action, $params)
    {
        $method = $this->camelize($action);
        try {
            $response = $this->forward('StreetVCBancboxInvestBundle:Webhook:' . $method, [], $params);
        } catch (UndefinedMethodException $e) {
            throw $this->createNotFoundException('Invalid Method', $e);
        }
        return $response;
    }

    /**
     * @FOS\RequestParam(name="action", requirements="FUNDING_ACTIVITY_FAILURE_NOTIFICATION")
     * Informs your system that a funding activity failed.
     *  - entity_id    Id of the Investor/ Id of the Issuer
     *  - entity_type  type of the entity
     *  - activity_id  Id of the activity
     *  - return_code  Failed activity code
     *  - failed_date  Date on which the activity failed
     */
    public function fundingActivityFailureNotificationAction()
    {
    }

    /**
     * @FOS\RequestParam(name="action", requirements="OPEN_ESCROW")
     * Informs your system when an Open Pending escrow has been reviewed and approved by Bancbox Invest Staff.
     *  - cfp_firstName    First Name of the CFP
     *  - cfp_lastName    Last Name of the CFP
     *  - escrow_name    Name of the project given to an escrow
     *  - escrow_id    The id of the escrow generated by Bancbox Invest system
     *  - escrow_refId    The Reference id of the escrow
     *  - issuer_firstName    Issuer first name
     *  - issuer_lastName    Issuer last name
     *  - issuer_id    The id generated by Bancbox Invest when registering an investor client
     *  - issuer_refId    The Reference id of the Issuer
     *  - escrow_fundingGoal    The funding goal amount for the project
     *  - escrow_overfundingAmount    The amount over the funding goal amount allowed for the project
     *  - escrow_startDate    The start date funds can be moved into the escrow
     *  - escrow_closeDate    The end date of the escrow (no funds beyond this date are accepted)
     */
    public function escrowOpenedAction()
    {
    }

    /**
     * @FOS\RequestParam(name="action", requirements="PROCEEDS_ACTIVITY_FAILURE_NOTIFICATION")
     * Informs your system that a proceeds activity got failed.
     *  - issuer_id    Id of the Issuer
     *  - investor_id  Id of the Investor
     *  - proceed_amount   Amount the Issuer is proceeding into the Investor's account
     *  - escrow_id    Id of the escrow
     *  - return_code  Failed activity code
     *  - error_description    Description of the error
     *  - failed_date  Date on which the activity failed
     */
    public function proceedsActivityFailureNotificationAction()
    {
    }

    /**
     * @FOS\RequestParam(name="action", requirements="BILLABLE_ACTIVITY_NOTIFICATION")
     * Informs your system that a billable activity has been created.
     *  - entity_id    Id of the Investor/ Id of the Issuer
     *  - entity_type  type of the entity
     *  - activity_id  Id of the activity
     *  - return_code  Failed activity code
     *  - failed_date  Date on which the activity failed
     *  - billable_date    Date on which billable amount is created
     *  - billable_amount  Amount that is billable
     */
    public function billableActivityNotificationAction()
    {
    }

    /**
     * @FOS\RequestParam(name="action", requirements="CHALLENGE_DEPOSIT_FAILED")
     * Informs your system that a Challenge Deposit has been failed.
     *  - challenge_id    Challenge Id
     *  - entity_id    Id of the Investor/ Id of the Issuer
     *  - verification_process_status    status of the verification process
     *  - problem_description    Description of the problem
     */
    public function challengeDepositFailedAction()
    {
    }

}
